<included>
    <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>./logs/info.log</file>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch> <!-- 해당 레벨만 기록한다. -->
            <onMismatch>DENY
            </onMismatch> <!-- 다른 수준의 레벨은 기록하지 않는다.(상위 레벨도 기록 안함), 상위 수준의 레벨에 대한 기록을 원하면 ACCEPT 로 하면 기록된다. -->
        </filter> <!-- 레벨별 필터링이 필요없을 경우 filter class 관련된 부분을 삭제하면 됨-->

        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <mdc/>
                <pattern>
                    <pattern>
                        {
                        "timestamp": "%date{yyyyMMdd HHmmss.SSSSSS}",
                        "message": "%message"
                        }
                    </pattern>
                </pattern>
            </providers>
            <timestampPattern>yyyyMMddHHmmss.SSSSSS</timestampPattern>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>info-history.log.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>50MB</maxFileSize>
                <!-- 한 로그 파일이 50MB 차면 위 fileNamePattern으로 분리해 저장한다 -->
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory>
            <totalSizeCap>2GB</totalSizeCap>
            <!-- 30일이 경과하거나, 전체 로그파일 용향이 2GB를 초과하면 오래된 파일 순으로 삭제한다. -->
        </rollingPolicy>
    </appender>
</included>
