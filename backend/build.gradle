plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = '2023-edonymyeon'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	asciidoctorExtensions
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'net.logstash.logback:logstash-logback-encoder:6.1'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	testImplementation 'junit:junit:4.13.1'
	runtimeOnly 'com.h2database:h2'

    compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	// FCM 알림 전송
	implementation 'com.google.firebase:firebase-admin:9.2.0'
	implementation 'com.squareup.okhttp3:okhttp:4.10.0'

	// rest assured 추가
	testImplementation 'io.rest-assured:rest-assured:5.3.1'

	// 스케줄러 테스트 의존성
	testImplementation 'org.awaitility:awaitility:4.2.0'

	implementation 'com.mysql:mysql-connector-j'

	// actuator 추가
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	// 프로메테우스 추가
	implementation 'io.micrometer:micrometer-registry-prometheus'

	// build/generated-snippets 에 생긴 .adoc 조각들을 프로젝트 내의 .adoc 파일에서 읽어들일 수 있도록 연동해줍니다.
	// 이 덕분에 .adoc 파일에서 operation 같은 매크로를 사용하여 스니펫 조각들을 연동할 수 있는 것입니다.
	// 그리고 최종적으로 .adoc 파일을 HTML로 만들어 export 해줍니다.
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	// flyway 추가
	implementation 'org.flywaydb:flyway-mysql'
	implementation 'org.flywaydb:flyway-core'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	dependsOn test // test 작업 이후에 작동하도록 하는 설정
	configurations 'asciidoctorExtensions' // 위에서 작성한 configuration 적용
	inputs.dir snippetsDir // snippetsDir 를 입력으로 구성

	// source가 없으면 .adoc파일을 전부 html로 만들어버림
	// source 지정시 특정 adoc만 HTML로 만든다.
	sources {
		include("**/index.adoc", "**/common/*.adoc")
	}

	// 특정 .adoc에 다른 adoc 파일을 가져와서(include) 사용하고 싶을 경우 경로를 baseDir로 맞춰주는 설정입니다.
	// 개별 adoc으로 운영한다면 필요 없는 옵션입니다.
	baseDirFollowsSourceFile()
}

tasks.register('copyDocument', Copy) {
	dependsOn asciidoctor
	from asciidoctor.outputDir
	into 'build/resources/main/static/docs'
}

jar {
	dependsOn copyDocument
}

bootJar {
	dependsOn copyDocument
}

resolveMainClassName {
	dependsOn copyDocument
}
